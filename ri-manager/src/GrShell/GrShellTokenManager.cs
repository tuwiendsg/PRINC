/* Generated By:CSharpCC: Do not edit this line. GrShellTokenManager.cs */
namespace de.unika.ipd.grGen.grShell {

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using de.unika.ipd.grGen.libGr;
using de.unika.ipd.grGen.libGr.sequenceParser;
using grIO;

public class GrShellTokenManager : GrShellConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & -549755813776L) != 0L || (active1 & -1L) != 0L || (active2 & 511L) != 0L)
         {
            mccmatchedKind = 150;
            return 7;
         }
         if ((active0 & 512L) != 0L)
            return 61;
         if ((active0 & 32768L) != 0L)
            return 62;
         if ((active0 & 256L) != 0L)
            return 63;
         if ((active0 & 4194308L) != 0L)
            return 7;
         if ((active0 & 25165824L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & -422762220879872L) != 0L || (active1 & -6446841857L) != 0L || (active2 & 509L) != 0L)
         {
            if (mccmatchedPos != 1) {
               mccmatchedKind = 150;
               mccmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 422212465065984L) != 0L || (active1 & 6446841856L) != 0L || (active2 & 2L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & -9431060987248640L) != 0L || (active1 & -1154065275382072385L) != 0L || (active2 & 445L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 2;
            return 7;
         }
         if ((active0 & 9008298766368768L) != 0L || (active1 & 1154065273230197824L) != 0L || (active2 & 64L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 6980155560691761152L) != 0L || (active1 & -6063270907319880820L) != 0L || (active2 & 33L) != 0L)
         {
            if (mccmatchedPos != 3) {
               mccmatchedKind = 150;
               mccmatchedPos = 3;
            }
            return 7;
         }
         if ((active0 & -6989586621679009792L) != 0L || (active1 & 4909205631937808435L) != 0L || (active2 & 412L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 6973956514134360064L) != 0L || (active1 & -8443493885287796730L) != 0L || (active2 & 33L) != 0L)
         {
            if (mccmatchedPos != 4) {
               mccmatchedKind = 150;
               mccmatchedPos = 4;
            }
            return 7;
         }
         if ((active0 & 582659798860824576L) != 0L || (active1 & 2380222978102133640L) != 0L || (active2 & 16L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 4647838510504476672L) != 0L || (active1 & -8588350195741966334L) != 0L || (active2 & 33L) != 0L)
         {
            if (mccmatchedPos != 5) {
               mccmatchedKind = 150;
               mccmatchedPos = 5;
            }
            return 7;
         }
         if ((active0 & 2326118003629883392L) != 0L || (active1 & 144856447893123332L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 87960930222080L) != 0L || (active1 & -8606364594253594622L) != 0L || (active2 & 33L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 6;
            return 7;
         }
         if ((active0 & 4647750549574254592L) != 0L || (active1 & 18014432871366656L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active1 & 4398046511104L) != 0L || (active2 & 32L) != 0L)
            return 7;
         if ((active0 & 87960930222080L) != 0L || (active1 & -8606368992300105726L) != 0L || (active2 & 1L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 7;
            return 7;
         }
         return -1;
      case 8:
         if ((active1 & -8610873691439104000L) != 0L || (active2 & 1L) != 0L)
            return 7;
         if ((active0 & 87960930222080L) != 0L || (active1 & 4504699138998274L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 8;
            return 7;
         }
         return -1;
      case 9:
         if ((active0 & 70368744177664L) != 0L || (active1 & 4503599627370498L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 9;
            return 7;
         }
         if ((active0 & 17592186044416L) != 0L || (active1 & 1099511627776L) != 0L)
            return 7;
         return -1;
      case 10:
         if ((active1 & 4503599627370498L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 10;
            return 7;
         }
         if ((active0 & 70368744177664L) != 0L)
            return 7;
         return -1;
      case 11:
         if ((active1 & 4503599627370496L) != 0L)
            return 7;
         if ((active1 & 2L) != 0L)
         {
            mccmatchedKind = 150;
            mccmatchedPos = 11;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private int mccStartNfa_0(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccStartNfaWithStates_0(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_0(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 9:
         return mccStartNfaWithStates_0(0, 2, 7);
      case 10:
         return mccStopAtPos(0, 7);
      case 33:
         return mccStopAtPos(0, 27);
      case 34:
         return mccStartNfaWithStates_0(0, 8, 63);
      case 36:
         return mccStopAtPos(0, 17);
      case 37:
         return mccStopAtPos(0, 29);
      case 38:
         mccmatchedKind = 19;
         return mccMoveStringLiteralDfa1_0(262144L, 0L, 0L);
      case 39:
         return mccStartNfaWithStates_0(0, 9, 61);
      case 40:
         return mccStopAtPos(0, 30);
      case 41:
         return mccStopAtPos(0, 31);
      case 42:
         return mccStopAtPos(0, 25);
      case 43:
         return mccStopAtPos(0, 26);
      case 44:
         return mccStopAtPos(0, 16);
      case 45:
         mccmatchedKind = 24;
         return mccMoveStringLiteralDfa1_0(8388608L, 0L, 0L);
      case 46:
         return mccStartNfaWithStates_0(0, 15, 62);
      case 58:
         mccmatchedKind = 11;
         return mccMoveStringLiteralDfa1_0(1024L, 0L, 0L);
      case 59:
         mccmatchedKind = 13;
         return mccMoveStringLiteralDfa1_0(4096L, 0L, 0L);
      case 60:
         mccmatchedKind = 36;
         return mccMoveStringLiteralDfa1_0(0L, 0L, 36028797018963968L);
      case 61:
         return mccStopAtPos(0, 14);
      case 62:
         return mccStopAtPos(0, 37);
      case 63:
         return mccStopAtPos(0, 28);
      case 64:
         return mccStopAtPos(0, 38);
      case 91:
         return mccStopAtPos(0, 34);
      case 92:
         return mccMoveStringLiteralDfa1_0(112L, 0L, 0L);
      case 93:
         return mccStopAtPos(0, 35);
      case 94:
         return mccStartNfaWithStates_0(0, 22, 7);
      case 97:
         return mccMoveStringLiteralDfa1_0(34634616274944L, 0L, 0L);
      case 98:
         return mccMoveStringLiteralDfa1_0(246290604621824L, 0L, 0L);
      case 99:
         return mccMoveStringLiteralDfa1_0(4222124650659840L, 0L, 0L);
      case 100:
         return mccMoveStringLiteralDfa1_0(139611588448485376L, 0L, 0L);
      case 101:
         return mccMoveStringLiteralDfa1_0(-144115188075855872L, 7L, 0L);
      case 102:
         return mccMoveStringLiteralDfa1_0(0L, 56L, 0L);
      case 103:
         return mccMoveStringLiteralDfa1_0(0L, 1984L, 0L);
      case 104:
         return mccMoveStringLiteralDfa1_0(0L, 6144L, 0L);
      case 105:
         return mccMoveStringLiteralDfa1_0(0L, 253952L, 0L);
      case 107:
         return mccMoveStringLiteralDfa1_0(0L, 262144L, 0L);
      case 108:
         return mccMoveStringLiteralDfa1_0(0L, 576460752311287808L, 0L);
      case 109:
         return mccMoveStringLiteralDfa1_0(0L, 25165824L, 0L);
      case 110:
         return mccMoveStringLiteralDfa1_0(0L, 1040187392L, 0L);
      case 111:
         return mccMoveStringLiteralDfa1_0(0L, 67645734912L, 0L);
      case 112:
         return mccMoveStringLiteralDfa1_0(0L, 481036337152L, 0L);
      case 113:
         return mccMoveStringLiteralDfa1_0(0L, 549755813888L, 0L);
      case 114:
         return mccMoveStringLiteralDfa1_0(0L, 280375465082880L, 0L);
      case 115:
         return mccMoveStringLiteralDfa1_0(0L, 8646629809574641664L, 0L);
      case 116:
         return mccMoveStringLiteralDfa1_0(0L, -9223372036854775808L, 31L);
      case 118:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 96L);
      case 119:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 128L);
      case 120:
         return mccMoveStringLiteralDfa1_0(0L, 0L, 256L);
      case 123:
         return mccStopAtPos(0, 32);
      case 124:
         mccmatchedKind = 21;
         return mccMoveStringLiteralDfa1_0(1048576L, 0L, 0L);
      case 125:
         return mccStopAtPos(0, 33);
      default :
         return mccMoveNfa_0(0, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch((int)curChar) {
      case 10:
         if ((active0 & 32L) != 0L)
            return mccStopAtPos(1, 5);
         break;
      case 13:
         if ((active0 & 64L) != 0L)
         {
            mccmatchedKind = 6;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 16L, active1, 0L, active2, 0L);
      case 38:
         if ((active0 & 262144L) != 0L)
            return mccStopAtPos(1, 18);
         break;
      case 45:
         if ((active2 & 36028797018963968L) != 0L)
            return mccStopAtPos(1, 183);
         break;
      case 58:
         if ((active0 & 1024L) != 0L)
            return mccStopAtPos(1, 10);
         break;
      case 59:
         if ((active0 & 4096L) != 0L)
            return mccStopAtPos(1, 12);
         break;
      case 62:
         if ((active0 & 8388608L) != 0L)
            return mccStopAtPos(1, 23);
         break;
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 35184372088832L, active1, 282780658827272L, active2, 96L);
      case 99:
         return mccMoveStringLiteralDfa2_0(active0, 144115737831669760L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(1, 48, 7);
         return mccMoveStringLiteralDfa2_0(active0, 864692227966763008L, active1, 0L, active2, 0L);
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, 31525197391593472L, active1, -9221403911007238080L, active2, 0L);
      case 102:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 1073741824L, active2, 0L);
      case 103:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 256L);
      case 104:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 15762598695796736L, active2, 1L);
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, 36028797018963968L, active1, 594475150812909584L, active2, 128L);
      case 108:
         return mccMoveStringLiteralDfa2_0(active0, 562949953421312L, active1, 0L, active2, 0L);
      case 109:
         return mccMoveStringLiteralDfa2_0(active0, 1152921504606846976L, active1, 8192L, active2, 0L);
      case 110:
         if ((active1 & 2147483648L) != 0L)
         {
            mccmatchedKind = 95;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_0(active0, 2305843009213693952L, active1, 4295016448L, active2, 0L);
      case 111:
         if ((active1 & 65536L) != 0L)
            return mccStartNfaWithStates_0(1, 80, 7);
         else if ((active2 & 2L) != 0L)
            return mccStartNfaWithStates_0(1, 129, 7);
         return mccMoveStringLiteralDfa2_0(active0, 1196268651020288L, active1, 218103808L, active2, 0L);
      case 112:
         return mccMoveStringLiteralDfa2_0(active0, 2199023255552L, active1, 36028857148506112L, active2, 0L);
      case 114:
         return mccMoveStringLiteralDfa2_0(active0, 4398046511104L, active1, 1952L, active2, 4L);
      case 115:
         if ((active1 & 131072L) != 0L)
            return mccStartNfaWithStates_0(1, 81, 7);
         else if ((active1 & 4194304L) != 0L)
            return mccStartNfaWithStates_0(1, 86, 7);
         return mccMoveStringLiteralDfa2_0(active0, 8796093022208L, active1, 0L, active2, 0L);
      case 116:
         return mccMoveStringLiteralDfa2_0(active0, 17592186044416L, active1, 504403158265495552L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 74309393851613184L, active1, 3458765064381661184L, active2, 0L);
      case 119:
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 274877906944L, active2, 0L);
      case 120:
         return mccMoveStringLiteralDfa2_0(active0, -4611686018427387904L, active1, 7L, active2, 0L);
      case 121:
         if ((active0 & 140737488355328L) != 0L)
            return mccStartNfaWithStates_0(1, 47, 7);
         return mccMoveStringLiteralDfa2_0(active0, 0L, active1, 4611686018427387904L, active2, 24L);
      case 124:
         if ((active0 & 1048576L) != 0L)
            return mccStopAtPos(1, 20);
         break;
      default :
         break;
   }
   return mccStartNfa_0(0, active0, active1, active2);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch((int)curChar) {
      case 10:
         if ((active0 & 16L) != 0L)
            return mccStopAtPos(2, 4);
         break;
      case 97:
         return mccMoveStringLiteralDfa3_0(active0, 2305843009213693952L, active1, 74309393851613568L, active2, 0L);
      case 98:
         if ((active1 & 1152921504606846976L) != 0L)
            return mccStartNfaWithStates_0(2, 124, 7);
         return mccMoveStringLiteralDfa3_0(active0, 4503599627370496L, active1, 524288L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa3_0(active0, 4611721202799476736L, active1, 2199023271936L, active2, 0L);
      case 100:
         if ((active0 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(2, 40, 7);
         else if ((active1 & 274877906944L) != 0L)
            return mccStartNfaWithStates_0(2, 102, 7);
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 4398264619008L, active2, 0L);
      case 101:
         return mccMoveStringLiteralDfa3_0(active0, -9222809086901354496L, active1, 36028805609160704L, active2, 0L);
      case 102:
         if ((active0 & 9007199254740992L) != 0L)
            return mccStartNfaWithStates_0(2, 53, 7);
         else if ((active1 & 1073741824L) != 0L)
            return mccStartNfaWithStates_0(2, 94, 7);
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 8796093054976L, active2, 0L);
      case 103:
         return mccMoveStringLiteralDfa3_0(active0, 864691128455135232L, active1, 0L, active2, 0L);
      case 104:
         return mccMoveStringLiteralDfa3_0(active0, 144115188075855872L, active1, 0L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa3_0(active0, 1152921504606846976L, active1, 549755813891L, active2, 1L);
      case 107:
         return mccMoveStringLiteralDfa3_0(active0, 8796093022208L, active1, 0L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa3_0(active0, 19140298416324608L, active1, 18577353026308120L, active2, 32L);
      case 109:
         if ((active1 & 536870912L) != 0L)
            return mccStartNfaWithStates_0(2, 93, 7);
         else if ((active1 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(2, 108, 7);
         return mccMoveStringLiteralDfa3_0(active0, 72057594037927936L, active1, 0L, active2, 0L);
      case 110:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 5188147870242439168L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 301741175033823776L, active2, 0L);
      case 112:
         if ((active1 & 8388608L) != 0L)
            return mccStartNfaWithStates_0(2, 87, 7);
         return mccMoveStringLiteralDfa3_0(active0, 2199023255552L, active1, 2305878193585790980L, active2, 24L);
      case 114:
         if ((active2 & 64L) != 0L)
            return mccStartNfaWithStates_0(2, 134, 7);
         return mccMoveStringLiteralDfa3_0(active0, 74766790688768L, active1, 144115394234286080L, active2, 256L);
      case 115:
         if ((active1 & 1024L) != 0L)
            return mccStartNfaWithStates_0(2, 74, 7);
         return mccMoveStringLiteralDfa3_0(active0, 38280596832649216L, active1, 70368744177664L, active2, 0L);
      case 116:
         if ((active1 & 64L) != 0L)
            return mccStartNfaWithStates_0(2, 70, 7);
         else if ((active1 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(2, 114, 7);
         return mccMoveStringLiteralDfa3_0(active0, 18141941858304L, active1, 140789027962880L, active2, 128L);
      case 117:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 4L);
      case 118:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 281474976710656L, active2, 0L);
      case 119:
         if ((active1 & 33554432L) != 0L)
            return mccStartNfaWithStates_0(2, 89, 7);
         break;
      case 120:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 121:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 1048576L, active2, 0L);
      case 122:
         return mccMoveStringLiteralDfa3_0(active0, 0L, active1, 2097152L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(1, active0, active1, active2);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa4_0(active0, 36596145018896384L, active1, 0L, active2, 0L);
      case 98:
         return mccMoveStringLiteralDfa4_0(active0, 2305843009213693952L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & -9223372036854775808L) != 0L)
            return mccStartNfaWithStates_0(3, 63, 7);
         else if ((active1 & 4611686018427387904L) != 0L)
            return mccStartNfaWithStates_0(3, 126, 7);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 36028797018963968L, active2, 1L);
      case 100:
         return mccMoveStringLiteralDfa4_0(active0, 70368744177664L, active1, 1099511631872L, active2, 0L);
      case 101:
         if ((active0 & 288230376151711744L) != 0L)
         {
            mccmatchedKind = 58;
            mccmatchedPos = 3;
         }
         else if ((active1 & 16L) != 0L)
            return mccStartNfaWithStates_0(3, 68, 7);
         else if ((active1 & 16777216L) != 0L)
            return mccStartNfaWithStates_0(3, 88, 7);
         else if ((active1 & 67108864L) != 0L)
         {
            mccmatchedKind = 90;
            mccmatchedPos = 3;
         }
         else if ((active1 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(3, 112, 7);
         else if ((active2 & 4L) != 0L)
            return mccStartNfaWithStates_0(3, 130, 7);
         else if ((active2 & 8L) != 0L)
         {
            mccmatchedKind = 131;
            mccmatchedPos = 3;
         }
         return mccMoveStringLiteralDfa4_0(active0, 594475150812905472L, active1, 2900960274951962624L, active2, 16L);
      case 102:
         return mccMoveStringLiteralDfa4_0(active0, 8796093022208L, active1, 0L, active2, 0L);
      case 104:
         if ((active2 & 128L) != 0L)
            return mccStartNfaWithStates_0(3, 135, 7);
         break;
      case 105:
         return mccMoveStringLiteralDfa4_0(active0, 549755813888L, active1, 144119637661974528L, active2, 32L);
      case 107:
         return mccMoveStringLiteralDfa4_0(active0, 35184372088832L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 268435456L) != 0L)
            return mccStartNfaWithStates_0(3, 92, 7);
         return mccMoveStringLiteralDfa4_0(active0, 4611688217450643456L, active1, 35184372105216L, active2, 0L);
      case 109:
         if ((active1 & 32L) != 0L)
            return mccStartNfaWithStates_0(3, 69, 7);
         break;
      case 110:
         if ((active1 & 8589934592L) != 0L)
            return mccStartNfaWithStates_0(3, 97, 7);
         break;
      case 111:
         if ((active0 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(3, 57, 7);
         return mccMoveStringLiteralDfa4_0(active0, 1125899906842624L, active1, 2199024345092L, active2, 0L);
      case 112:
         if ((active0 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(3, 56, 7);
         else if ((active1 & 2048L) != 0L)
            return mccStartNfaWithStates_0(3, 75, 7);
         else if ((active1 & 288230376151711744L) != 0L)
            return mccStartNfaWithStates_0(3, 122, 7);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 2251799813947776L, active2, 0L);
      case 114:
         return mccMoveStringLiteralDfa4_0(active0, 17592186044416L, active1, 76561193665298432L, active2, 0L);
      case 115:
         if ((active2 & 256L) != 0L)
            return mccStartNfaWithStates_0(3, 136, 7);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 206158430216L, active2, 0L);
      case 116:
         if ((active0 & 1152921504606846976L) != 0L)
            return mccStartNfaWithStates_0(3, 60, 7);
         else if ((active1 & 1L) != 0L)
         {
            mccmatchedKind = 64;
            mccmatchedPos = 3;
         }
         else if ((active1 & 549755813888L) != 0L)
            return mccStartNfaWithStates_0(3, 103, 7);
         return mccMoveStringLiteralDfa4_0(active0, 2251799813685248L, active1, -9223372036854775806L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa4_0(active0, 4503599627370496L, active1, 512L, active2, 0L);
      case 119:
         if ((active1 & 9007199254740992L) != 0L)
            return mccStartNfaWithStates_0(3, 117, 7);
         break;
      case 121:
         if ((active1 & 4294967296L) != 0L)
            return mccStartNfaWithStates_0(3, 96, 7);
         return mccMoveStringLiteralDfa4_0(active0, 0L, active1, 140737490452480L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(2, active0, active1, active2);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 35184372088832L, active2, 0L);
      case 98:
         return mccMoveStringLiteralDfa5_0(active0, 36028797018963968L, active1, 0L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, -9078693898825498624L, active2, 0L);
      case 100:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 262144L, active2, 32L);
      case 101:
         if ((active1 & 8L) != 0L)
            return mccStartNfaWithStates_0(4, 67, 7);
         else if ((active1 & 68719476736L) != 0L)
         {
            mccmatchedKind = 100;
            mccmatchedPos = 4;
         }
         else if ((active1 & 2251799813685248L) != 0L)
            return mccStartNfaWithStates_0(4, 115, 7);
         return mccMoveStringLiteralDfa5_0(active0, 105553116266496L, active1, 137438957568L, active2, 0L);
      case 103:
         if ((active0 & 4503599627370496L) != 0L)
            return mccStartNfaWithStates_0(4, 52, 7);
         break;
      case 104:
         if ((active1 & 128L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 4;
         }
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 256L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa5_0(active0, 17592186044416L, active1, 36028797018963968L, active2, 0L);
      case 107:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 1L);
      case 108:
         return mccMoveStringLiteralDfa5_0(active0, 2305843009213693952L, active1, 524288L, active2, 0L);
      case 110:
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 18014398511579136L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa5_0(active0, 2261145662521344L, active1, 1151051235330L, active2, 0L);
      case 112:
         if ((active1 & 512L) != 0L)
            return mccStartNfaWithStates_0(4, 73, 7);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 140737488355328L, active2, 0L);
      case 114:
         if ((active0 & 562949953421312L) != 0L)
            return mccStartNfaWithStates_0(4, 49, 7);
         else if ((active0 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(4, 50, 7);
         else if ((active1 & 2305843009213693952L) != 0L)
            return mccStartNfaWithStates_0(4, 125, 7);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 15393162797060L, active2, 0L);
      case 115:
         if ((active0 & 576460752303423488L) != 0L)
            return mccStartNfaWithStates_0(4, 59, 7);
         else if ((active1 & 134217728L) != 0L)
            return mccStartNfaWithStates_0(4, 91, 7);
         else if ((active2 & 16L) != 0L)
            return mccStartNfaWithStates_0(4, 132, 7);
         return mccMoveStringLiteralDfa5_0(active0, 0L, active1, 576460752303423488L, active2, 0L);
      case 116:
         if ((active1 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(4, 110, 7);
         else if ((active1 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(4, 120, 7);
         return mccMoveStringLiteralDfa5_0(active0, 18014398509481984L, active1, 4503599627403264L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa5_0(active0, 4611686018427387904L, active1, 1064960L, active2, 0L);
      case 121:
         if ((active0 & 2199023255552L) != 0L)
            return mccStartNfaWithStates_0(4, 41, 7);
         else if ((active0 & 4398046511104L) != 0L)
            return mccStartNfaWithStates_0(4, 42, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(3, active0, active1, active2);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 32768L, active2, 32L);
      case 98:
         return mccMoveStringLiteralDfa6_0(active0, 17592186044416L, active1, 0L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 18014398509481984L, active2, 0L);
      case 100:
         if ((active1 & 2199023255552L) != 0L)
            return mccStartNfaWithStates_0(5, 105, 7);
         return mccMoveStringLiteralDfa6_0(active0, 4611686018427387904L, active1, 16384L, active2, 0L);
      case 101:
         if ((active0 & 18014398509481984L) != 0L)
            return mccStartNfaWithStates_0(5, 54, 7);
         else if ((active0 & 2305843009213693952L) != 0L)
            return mccStartNfaWithStates_0(5, 61, 7);
         else if ((active1 & 140737488355328L) != 0L)
            return mccStartNfaWithStates_0(5, 111, 7);
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 13194139795456L, active2, 0L);
      case 102:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 36028797018963968L, active2, 0L);
      case 105:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 4503599629467648L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa6_0(active0, 36028797018963968L, active1, 0L, active2, 0L);
      case 109:
         if ((active0 & 2251799813685248L) != 0L)
            return mccStartNfaWithStates_0(5, 51, 7);
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 1099511627776L, active2, 0L);
      case 110:
         if ((active1 & 4096L) != 0L)
            return mccStartNfaWithStates_0(5, 76, 7);
         else if ((active1 & 17179869184L) != 0L)
         {
            mccmatchedKind = 98;
            mccmatchedPos = 5;
         }
         return mccMoveStringLiteralDfa6_0(active0, 35734127902720L, active1, 34359738370L, active2, 1L);
      case 111:
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 114:
         if ((active0 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(5, 43, 7);
         else if ((active1 & 137438953472L) != 0L)
            return mccStartNfaWithStates_0(5, 101, 7);
         return mccMoveStringLiteralDfa6_0(active0, 70368744177664L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 256L) != 0L)
            return mccStartNfaWithStates_0(5, 72, 7);
         else if ((active1 & 524288L) != 0L)
            return mccStartNfaWithStates_0(5, 83, 7);
         break;
      case 116:
         if ((active1 & 4L) != 0L)
            return mccStartNfaWithStates_0(5, 66, 7);
         else if ((active1 & 8192L) != 0L)
            return mccStartNfaWithStates_0(5, 77, 7);
         else if ((active1 & 1048576L) != 0L)
            return mccStartNfaWithStates_0(5, 84, 7);
         else if ((active1 & 562949953421312L) != 0L)
            return mccStartNfaWithStates_0(5, 113, 7);
         else if ((active1 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(5, 121, 7);
         return mccMoveStringLiteralDfa6_0(active0, 0L, active1, 576460752303423488L, active2, 0L);
      case 121:
         if ((active1 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(5, 109, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(4, active0, active1, active2);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch((int)curChar) {
      case 98:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 262144L, active2, 0L);
      case 99:
         if ((active1 & 2097152L) != 0L)
            return mccStartNfaWithStates_0(6, 85, 7);
         return mccMoveStringLiteralDfa7_0(active0, 70368744177664L, active1, 4398046511104L, active2, 0L);
      case 100:
         if ((active0 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(6, 45, 7);
         break;
      case 101:
         if ((active0 & 36028797018963968L) != 0L)
            return mccStartNfaWithStates_0(6, 55, 7);
         else if ((active0 & 4611686018427387904L) != 0L)
            return mccStartNfaWithStates_0(6, 62, 7);
         else if ((active1 & 16384L) != 0L)
            return mccStartNfaWithStates_0(6, 78, 7);
         else if ((active1 & 18014398509481984L) != 0L)
            return mccStartNfaWithStates_0(6, 118, 7);
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 1L);
      case 102:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 2L, active2, 0L);
      case 103:
         if ((active1 & 32768L) != 0L)
            return mccStartNfaWithStates_0(6, 79, 7);
         break;
      case 105:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 36028797018963968L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, -9223372036854775808L, active2, 0L);
      case 110:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 4512395720392704L, active2, 0L);
      case 115:
         if ((active0 & 549755813888L) != 0L)
            return mccStartNfaWithStates_0(6, 39, 7);
         else if ((active1 & 34359738368L) != 0L)
            return mccStartNfaWithStates_0(6, 99, 7);
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 1099511627776L, active2, 0L);
      case 116:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 32L);
      case 117:
         return mccMoveStringLiteralDfa7_0(active0, 17592186044416L, active1, 0L, active2, 0L);
      case 121:
         return mccMoveStringLiteralDfa7_0(active0, 0L, active1, 576460752303423488L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(5, active0, active1, active2);
}
private int mccMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 2L, active2, 0L);
      case 99:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 8796093022208L, active2, 0L);
      case 101:
         if ((active2 & 32L) != 0L)
            return mccStartNfaWithStates_0(7, 133, 7);
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 36029896530591744L, active2, 0L);
      case 102:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 4503599627370496L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 576460752303423488L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa8_0(active0, 70368744177664L, active1, -9223372036854775808L, active2, 0L);
      case 115:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 1L);
      case 116:
         if ((active1 & 4398046511104L) != 0L)
            return mccStartNfaWithStates_0(7, 106, 7);
         return mccMoveStringLiteralDfa8_0(active0, 17592186044416L, active1, 0L, active2, 0L);
      case 117:
         return mccMoveStringLiteralDfa8_0(active0, 0L, active1, 262144L, active2, 0L);
      default :
         break;
   }
   return mccStartNfa_0(6, active0, active1, active2);
}
private int mccMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch((int)curChar) {
      case 100:
         if ((active1 & 36028797018963968L) != 0L)
            return mccStartNfaWithStates_0(8, 119, 7);
         break;
      case 101:
         if ((active1 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(8, 107, 7);
         else if ((active1 & 576460752303423488L) != 0L)
            return mccStartNfaWithStates_0(8, 123, 7);
         return mccMoveStringLiteralDfa9_0(active0, 17592186044416L, active1, 1099511627776L, active2, 0L);
      case 103:
         if ((active1 & 262144L) != 0L)
            return mccStartNfaWithStates_0(8, 82, 7);
         break;
      case 105:
         return mccMoveStringLiteralDfa9_0(active0, 0L, active1, 2L, active2, 0L);
      case 108:
         return mccMoveStringLiteralDfa9_0(active0, 70368744177664L, active1, 0L, active2, 0L);
      case 111:
         return mccMoveStringLiteralDfa9_0(active0, 0L, active1, 4503599627370496L, active2, 0L);
      case 114:
         if ((active1 & -9223372036854775808L) != 0L)
            return mccStartNfaWithStates_0(8, 127, 7);
         break;
      case 115:
         if ((active2 & 1L) != 0L)
            return mccStartNfaWithStates_0(8, 128, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(7, active0, active1, active2);
}
private int mccMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return mccStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch((int)curChar) {
      case 100:
         if ((active1 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(9, 104, 7);
         break;
      case 108:
         return mccMoveStringLiteralDfa10_0(active0, 0L, active1, 2L);
      case 111:
         return mccMoveStringLiteralDfa10_0(active0, 70368744177664L, active1, 0L);
      case 115:
         if ((active0 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(9, 44, 7);
         break;
      case 116:
         return mccMoveStringLiteralDfa10_0(active0, 0L, active1, 4503599627370496L);
      default :
         break;
   }
   return mccStartNfa_0(8, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa11_0(active0, 0L, active1, 4503599627370496L);
      case 114:
         if ((active0 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(10, 46, 7);
         break;
      case 117:
         return mccMoveStringLiteralDfa11_0(active0, 0L, active1, 2L);
      default :
         break;
   }
   return mccStartNfa_0(9, active0, active1, 0L);
}
private int mccMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return mccStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch((int)curChar) {
      case 103:
         if ((active1 & 4503599627370496L) != 0L)
            return mccStartNfaWithStates_0(11, 116, 7);
         break;
      case 114:
         return mccMoveStringLiteralDfa12_0(active1, 2L);
      default :
         break;
   }
   return mccStartNfa_0(10, 0L, active1, 0L);
}
private int mccMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return mccStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch((int)curChar) {
      case 101:
         if ((active1 & 2L) != 0L)
            return mccStartNfaWithStates_0(12, 65, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(11, 0L, active1, 0L);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 61;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 61:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 39)
                  {
                     if (kind > 149)
                        kind = 149;
                  }
                  break;
               case 62:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     mccCheckNAddStates(0, 2);
                  }
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(3, 5);
                  break;
               case 0:
                  if ((140741783313407 & l) != 0L)
                  {
                     if (kind > 150)
                        kind = 150;
                     mccCheckNAdd(7);
                  }
                  else if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     mccCheckNAddStates(6, 22);
                  }
                  else if (curChar == 46)
                     mccCheckNAddTwoStates(26, 38);
                  else if (curChar == 45)
                     mccCheckNAddStates(23, 32);
                  else if (curChar == 35)
                  {
                     if (kind > 151)
                        kind = 151;
                     mccCheckNAdd(9);
                  }
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  if (curChar == 48)
                     mccAddStates(33, 36);
                  break;
               case 25:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(46, 36);
                  else if (curChar == 46)
                     mccCheckNAdd(38);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(42, 43);
                  else if (curChar == 46)
                     mccCheckNAdd(26);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(30, 31);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(37, 40);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(16, 17);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(14, 15);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(12, 13);
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 137)
                        kind = 137;
                     mccCheckNAdd(11);
                  }
                  break;
               case 63:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  else if (curChar == 34)
                  {
                     if (kind > 148)
                        kind = 148;
                  }
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 148)
                     kind = 148;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 149)
                     kind = 149;
                  break;
               case 6:
                  if ((140741783313407 & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  mccCheckNAdd(7);
                  break;
               case 7:
                  if ((288089642958314495 & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  mccCheckNAdd(7);
                  break;
               case 8:
                  if (curChar != 35)
                     break;
                  if (kind > 151)
                     kind = 151;
                  mccCheckNAdd(9);
                  break;
               case 9:
                  if ((-1025 & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  mccCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 45)
                     mccCheckNAddStates(23, 32);
                  break;
               case 11:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  mccCheckNAdd(11);
                  break;
               case 12:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(37, 40);
                  break;
               case 19:
                  if (curChar == 46)
                     mccCheckNAdd(20);
                  break;
               case 20:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(41, 43);
                  break;
               case 22:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(23);
                  break;
               case 23:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(23, 24);
                  break;
               case 26:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(3, 5);
                  break;
               case 28:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(29);
                  break;
               case 29:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(29, 24);
                  break;
               case 30:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 46)
                     mccCheckNAdd(32);
                  break;
               case 32:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  mccCheckNAddStates(44, 46);
                  break;
               case 34:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(35);
                  break;
               case 35:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  mccCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if (curChar == 46)
                     mccCheckNAdd(38);
                  break;
               case 38:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  mccCheckNAddStates(0, 2);
                  break;
               case 40:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(41);
                  break;
               case 41:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  mccCheckNAddTwoStates(41, 36);
                  break;
               case 42:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(45);
                  break;
               case 45:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  mccCheckNAddTwoStates(45, 36);
                  break;
               case 46:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(46, 36);
                  break;
               case 47:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  mccCheckNAddStates(6, 22);
                  break;
               case 48:
                  if (curChar == 48)
                     mccAddStates(33, 36);
                  break;
               case 50:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  mccstateSet[mccnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(47, 48);
                  break;
               case 55:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(49, 50);
                  break;
               case 58:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(51, 52);
                  break;
               case 60:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(26, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 61:
               case 4:
                  mccCheckNAddTwoStates(4, 5);
                  break;
               case 0:
               case 7:
                  if ((-4035225266795053058 & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  mccCheckNAdd(7);
                  break;
               case 63:
               case 1:
                  mccCheckNAddTwoStates(1, 2);
                  break;
               case 9:
                  if (kind > 151)
                     kind = 151;
                  mccstateSet[mccnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((144115188109410304 & l) != 0L && kind > 138)
                     kind = 138;
                  break;
               case 15:
                  if ((2251799814209536 & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 17:
                  if ((17592186048512 & l) != 0L && kind > 140)
                     kind = 140;
                  break;
               case 21:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(53, 54);
                  break;
               case 24:
                  if ((274877907008 & l) != 0L && kind > 145)
                     kind = 145;
                  break;
               case 27:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(55, 56);
                  break;
               case 33:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(57, 58);
                  break;
               case 36:
                  if ((68719476752 & l) != 0L && kind > 146)
                     kind = 146;
                  break;
               case 39:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(59, 60);
                  break;
               case 43:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(61, 62);
                  break;
               case 49:
                  if (curChar == 120)
                     mccCheckNAdd(50);
                  break;
               case 50:
                  if ((541165879422 & l) == 0L)
                     break;
                  if (kind > 141)
                     kind = 141;
                  mccCheckNAdd(50);
                  break;
               case 51:
                  if (curChar == 120)
                     mccCheckNAdd(52);
                  break;
               case 52:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if ((144115188109410304 & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 54:
                  if (curChar == 120)
                     mccCheckNAdd(55);
                  break;
               case 55:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((2251799814209536 & l) != 0L && kind > 143)
                     kind = 143;
                  break;
               case 57:
                  if (curChar == 120)
                     mccCheckNAdd(58);
                  break;
               case 58:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if ((17592186048512 & l) != 0L && kind > 144)
                     kind = 144;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 61:
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 0:
               case 7:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  mccCheckNAdd(7);
                  break;
               case 63:
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 9:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  mccstateSet[mccnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 61 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccMoveStringLiteralDfa0_4()
{
   return mccMoveNfa_4(0, 0);
}
private int mccMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 7;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 170)
                        kind = 170;
                     mccCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 168)
                     kind = 168;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 169)
                     kind = 169;
                  break;
               case 6:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  mccCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  mccAddStates(63, 64);
                  break;
               case 4:
                  mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(63, 64);
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 7 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private int mccStartNfa_3(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_3(mccStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int mccStartNfaWithStates_3(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_3(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_3()
{
   switch((int)curChar) {
      default :
         return mccMoveNfa_3(0, 0);
   }
}
private int mccMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 7;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((-2305913983548270081 & l) != 0L)
                  {
                     if (kind > 166)
                        kind = 166;
                     mccCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 164)
                     kind = 164;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 165)
                     kind = 165;
                  break;
               case 6:
                  if ((-2305913983548270081 & l) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  mccCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if (kind > 166)
                     kind = 166;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  mccAddStates(63, 64);
                  break;
               case 4:
                  mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 166)
                     kind = 166;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(63, 64);
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 7 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccMoveStringLiteralDfa0_2()
{
   return mccMoveNfa_2(9, 0);
}
private int mccMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 9;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 9:
                  if ((-34359747585 & l) != 0L)
                  {
                     if (kind > 160)
                        kind = 160;
                     mccCheckNAddStates(67, 70);
                  }
                  else if ((9216 & l) != 0L)
                  {
                     if (kind > 160)
                        kind = 160;
                  }
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((-34359747585 & l) == 0L)
                     break;
                  kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               case 1:
                  if ((9216 & l) != 0L && kind > 160)
                     kind = 160;
                  break;
               case 2:
                  if (curChar == 10 && kind > 160)
                     kind = 160;
                  break;
               case 3:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar != 10)
                     break;
                  if (kind > 160)
                     kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               case 6:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar != 13)
                     break;
                  if (kind > 160)
                     kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               case 8:
                  if (curChar != 35)
                     break;
                  kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 9:
                  if (kind > 160)
                     kind = 160;
                  mccCheckNAddStates(67, 70);
                  if (curChar == 92)
                     mccAddStates(71, 74);
                  break;
               case 0:
                  if (kind > 160)
                     kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               case 4:
                  if (curChar == 92)
                     mccAddStates(71, 74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 9:
               case 0:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  mccCheckNAddStates(67, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 9 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private int mccStartNfa_1(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_1(mccStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int mccStartNfaWithStates_1(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_1(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_1()
{
   switch((int)curChar) {
      case 9:
         return mccStartNfaWithStates_1(0, 153, 6);
      case 10:
         return mccStopAtPos(0, 158);
      default :
         return mccMoveNfa_1(0, 0);
   }
}
private int mccMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 7;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((6341063237341010943 & l) != 0L)
                  {
                     if (kind > 157)
                        kind = 157;
                     mccCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 155)
                     kind = 155;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 156)
                     kind = 156;
                  break;
               case 6:
                  if ((6341063237341010943 & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  mccCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if ((-1152921504606846977 & l) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  mccAddStates(63, 64);
                  break;
               case 4:
                  mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 157)
                     kind = 157;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(63, 64);
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 7 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
private int mccStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 985162418487296L) != 0L)
         {
            mccmatchedKind = 180;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private int mccStartNfa_5(int pos, long active0, long active1, long active2)
{
   return mccMoveNfa_5(mccStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int mccStartNfaWithStates_5(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_5(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_5()
{
   switch((int)curChar) {
      case 10:
         return mccStopAtPos(0, 181);
      case 92:
         return mccMoveStringLiteralDfa1_5(985162418487296L);
      default :
         return mccMoveNfa_5(0, 0);
   }
}
private int mccMoveStringLiteralDfa1_5(long active2)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_5(0, 0L, 0L, active2);
      return 1;
   }
   switch((int)curChar) {
      case 10:
         if ((active2 & 281474976710656L) != 0L)
            return mccStopAtPos(1, 176);
         break;
      case 13:
         if ((active2 & 562949953421312L) != 0L)
         {
            mccmatchedKind = 177;
            mccmatchedPos = 1;
         }
         return mccMoveStringLiteralDfa2_5(active2, 140737488355328L);
      default :
         break;
   }
   return mccStartNfa_5(0, 0L, 0L, active2);
}
private int mccMoveStringLiteralDfa2_5(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return mccStartNfa_5(0, 0L, 0L, old2); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_5(1, 0L, 0L, active2);
      return 2;
   }
   switch((int)curChar) {
      case 10:
         if ((active2 & 140737488355328L) != 0L)
            return mccStopAtPos(2, 175);
         break;
      default :
         break;
   }
   return mccStartNfa_5(1, 0L, 0L, active2);
}
private int mccMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 7;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((-2305913983548270081 & l) != 0L)
                  {
                     if (kind > 180)
                        kind = 180;
                     mccCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 178)
                     kind = 178;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 179)
                     kind = 179;
                  break;
               case 6:
                  if ((-2305913983548270081 & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  mccCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if (kind > 180)
                     kind = 180;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  mccAddStates(63, 64);
                  break;
               case 4:
                  mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 6:
                  if ((mccbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  mccCheckNAdd(6);
                  break;
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(63, 64);
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(65, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 7 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
static readonly int[] mccnextStates = {
   38, 39, 36, 26, 27, 24, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 
   24, 30, 31, 42, 43, 46, 36, 11, 12, 14, 16, 18, 25, 30, 37, 42, 
   46, 49, 51, 54, 57, 18, 19, 21, 24, 20, 21, 24, 32, 33, 36, 52, 
   53, 55, 56, 58, 59, 22, 23, 28, 29, 34, 35, 40, 41, 44, 45, 1, 
   2, 4, 5, 0, 1, 3, 4, 6, 5, 7, 8, 
};
public static readonly string[] mccstrLiteralImages = {
"", null, null, null, null, null, null, "\n", "\"", "\'", "::", ":", ";;", 
";", "=", ".", ",", "$", "&&", "&", "||", "|", "^", "->", "-", "*", "+", "!", "?", 
"%", "(", ")", "{", "}", "[", "]", "<", ">", "@", "actions", "add", "apply", 
"array", "askfor", "attributes", "backend", "bordercolor", "by", "cd", "clear", 
"color", "custom", "debug", "def", "delete", "disable", "dump", "echo", "edge", 
"edges", "emit", "enable", "exclude", "exec", "exit", "exitonfailure", "export", 
"false", "file", "from", "get", "graph", "graphs", "group", "grs", "help", "hidden", 
"import", "include", "infotag", "io", "is", "keepdebug", "labels", "layout", "lazynic", 
"ls", "map", "mode", "new", "node", "nodes", "null", "num", "off", "on", "only", 
"open", "option", "options", "parse", "parser", "pwd", "quit", "randomseed", "record", 
"redirect", "reference", "rem", "replay", "reset", "retype", "save", "select", "set", 
"shape", "shortinfotag", "show", "silence", "specified", "start", "strict", "stop", 
"linestyle", "sub", "super", "sync", "textcolor", "thickness", "to", "true", "type", 
"types", "validate", "var", "with", "xgrs", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\n", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\n", null, "<-", null, };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
   "WithinFilename", 
   "WithinCommand", 
   "WithinAnyString", 
   "WithinAttributeName", 
   "WithinAnyStrings", 
};
public static readonly int[] mccnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 
};
static readonly long[] mcctoToken = {
   -127, -1, 143006820099162111, 
};
static readonly long[] mcctoSkip = {
   126, 0, 1108367976169472, 
};
static readonly long[] mcctoSpecial = {
   0, 0, 8388608, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[61];
private readonly int[] mccstateSet = new int[122];
System.Text.StringBuilder image;
int mccimageLen;
int lengthOfMatch;
protected char curChar;
public GrShellTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public GrShellTokenManager(SimpleCharStream stream, int lexState) :
   this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 61; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   if (mccmatchedPos < 0) {
      if (image == null)
         t.image = "";
      else
         t.image = image.ToString();
      t.beginLine = t.endLine = input_stream.BeginLine;
      t.beginColumn = t.endColumn = input_stream.BeginColumn;
   } else {
      string im = mccstrLiteralImages[mccmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.BeginLine;
      t.beginColumn = input_stream.BeginColumn;
      t.endLine = input_stream.EndLine;
      t.endColumn = input_stream.EndColumn;
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   mccimageLen = 0;

   switch(curLexState) {
     case 0:
       try { input_stream.Backup(0);
          while (curChar <= ' ' && (4294975488L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       } catch (System.IO.IOException) { goto EOFLoop; }
       mccmatchedKind = Int32.MaxValue;
       mccmatchedPos = 0;
       curPos = mccMoveStringLiteralDfa0_0();
       if (mccmatchedPos == 0 && mccmatchedKind > 184)
       {
          mccmatchedKind = 184;
       }
       break;
     case 1:
       try { input_stream.Backup(0);
          while (curChar <= ' ' && (4294975488L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       } catch (System.IO.IOException) { goto EOFLoop; }
       mccmatchedKind = Int32.MaxValue;
       mccmatchedPos = 0;
       curPos = mccMoveStringLiteralDfa0_1();
       if (mccmatchedPos == 0 && mccmatchedKind > 159)
       {
          mccmatchedKind = 159;
       }
       break;
     case 2:
       mccmatchedKind = 160;
       mccmatchedPos = -1;
       curPos = 0;
       curPos = mccMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.Backup(0);
          while (curChar <= ' ' && (4294976000L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       } catch (System.IO.IOException) { goto EOFLoop; }
       mccmatchedKind = Int32.MaxValue;
       mccmatchedPos = 0;
       curPos = mccMoveStringLiteralDfa0_3();
       if (mccmatchedPos == 0 && mccmatchedKind > 167)
       {
          mccmatchedKind = 167;
       }
       break;
     case 4:
       mccmatchedKind = Int32.MaxValue;
       mccmatchedPos = 0;
       curPos = mccMoveStringLiteralDfa0_4();
       if (mccmatchedPos == 0 && mccmatchedKind > 171)
       {
          mccmatchedKind = 171;
       }
       break;
     case 5:
       try { input_stream.Backup(0);
          while (curChar <= ' ' && (4294976000L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       } catch (System.IO.IOException) { goto EOFLoop; }
       mccmatchedKind = Int32.MaxValue;
       mccmatchedPos = 0;
       curPos = mccMoveStringLiteralDfa0_5();
       if (mccmatchedPos == 0 && mccmatchedKind > 182)
       {
          mccmatchedKind = 182;
       }
       break;
   }
     if (mccmatchedKind != Int32.MaxValue) {
        if (mccmatchedPos + 1 < curPos)
           input_stream.Backup(curPos - mccmatchedPos - 1);
        if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
           matchedToken = mccFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (mccnewLexState[mccmatchedKind] != -1)
         curLexState = mccnewLexState[mccmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((mcctoSpecial[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
              matchedToken = mccFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (mccnewLexState[mccmatchedKind] != -1)
           curLexState = mccnewLexState[mccmatchedKind];
           goto EOFLoop;
        }
     }
     int error_line = input_stream.EndLine;
     int error_column = input_stream.EndColumn;
     string error_after = null;
     bool EOFSeen = false;
     try { input_stream.ReadChar(); input_stream.Backup(1); }
     catch (System.IO.IOException) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        } else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.Backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(mccmatchedKind) {
      case 148 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 149 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 155 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 156 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 164 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 165 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 168 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 169 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 178 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 179 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
          matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      default : 
         break;
   }
}
}
}
