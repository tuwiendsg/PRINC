/* Generated By:CSharpCC: Do not edit this line. SequenceParserTokenManager.cs */
namespace de.unika.ipd.grGen.libGr.sequenceParser {

using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using de.unika.ipd.grGen.libGr;

public class SequenceParserTokenManager : SequenceParserConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 140737488355328L) != 0L)
            return 45;
         if ((active0 & 2251799813685248L) != 0L)
            return 59;
         if ((active0 & 218282744927485952L) != 0L)
         {
            mccmatchedKind = 71;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 1688849860263936L) != 0L)
            return 7;
         if ((active0 & 216593895067222016L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 335351046471680L) != 0L)
            return 7;
         if ((active0 & 216258544020750336L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 2;
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 216247548904472576L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 3;
            return 7;
         }
         if ((active0 & 10995116277760L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 4;
            return 7;
         }
         if ((active0 & 144189954866544640L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 72057594037927936L) != 0L)
         {
            mccmatchedKind = 71;
            mccmatchedPos = 5;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private int mccStartNfa_0(int pos, long active0)
{
   return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccStartNfaWithStates_0(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_0(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 33:
         mccmatchedKind = 24;
         return mccMoveStringLiteralDfa1_0(131072L);
      case 36:
         return mccStopAtPos(0, 10);
      case 37:
         return mccStopAtPos(0, 37);
      case 38:
         mccmatchedKind = 12;
         return mccMoveStringLiteralDfa1_0(2304L);
      case 40:
         return mccStopAtPos(0, 25);
      case 41:
         return mccStopAtPos(0, 26);
      case 42:
         return mccStopAtPos(0, 21);
      case 43:
         return mccStopAtPos(0, 22);
      case 44:
         return mccStopAtPos(0, 9);
      case 45:
         return mccMoveStringLiteralDfa1_0(140737488355328L);
      case 46:
         return mccStartNfaWithStates_0(0, 51, 59);
      case 47:
         return mccStopAtPos(0, 23);
      case 58:
         mccmatchedKind = 35;
         return mccMoveStringLiteralDfa1_0(68719476736L);
      case 59:
         mccmatchedKind = 54;
         return mccMoveStringLiteralDfa1_0(45035996273704960L);
      case 60:
         mccmatchedKind = 29;
         return mccMoveStringLiteralDfa1_0(4503601775116288L);
      case 61:
         mccmatchedKind = 5;
         return mccMoveStringLiteralDfa1_0(65600L);
      case 62:
         mccmatchedKind = 30;
         return mccMoveStringLiteralDfa1_0(4295491584L);
      case 63:
         return mccStopAtPos(0, 38);
      case 64:
         return mccStopAtPos(0, 39);
      case 91:
         return mccStopAtPos(0, 27);
      case 93:
         return mccStopAtPos(0, 28);
      case 94:
         return mccStopAtPos(0, 15);
      case 97:
         return mccMoveStringLiteralDfa1_0(70368744177664L);
      case 100:
         return mccMoveStringLiteralDfa1_0(1099511627776L);
      case 102:
         return mccMoveStringLiteralDfa1_0(285873023221760L);
      case 105:
         return mccMoveStringLiteralDfa1_0(1688849860263936L);
      case 109:
         return mccMoveStringLiteralDfa1_0(35184372088832L);
      case 110:
         return mccMoveStringLiteralDfa1_0(8796093022208L);
      case 115:
         return mccMoveStringLiteralDfa1_0(17592186044416L);
      case 116:
         return mccMoveStringLiteralDfa1_0(2199023255552L);
      case 118:
         return mccMoveStringLiteralDfa1_0(72057594037927936L);
      case 121:
         return mccMoveStringLiteralDfa1_0(144115188075855872L);
      case 123:
         return mccStopAtPos(0, 33);
      case 124:
         mccmatchedKind = 14;
         return mccMoveStringLiteralDfa1_0(8320L);
      case 125:
         return mccStopAtPos(0, 34);
      case 126:
         return mccMoveStringLiteralDfa1_0(1048576L);
      default :
         return mccMoveNfa_0(0, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch((int)curChar) {
      case 38:
         if ((active0 & 2048L) != 0L)
            return mccStopAtPos(1, 11);
         break;
      case 58:
         if ((active0 & 68719476736L) != 0L)
            return mccStopAtPos(1, 36);
         break;
      case 59:
         if ((active0 & 4503599627370496L) != 0L)
            return mccStopAtPos(1, 52);
         else if ((active0 & 36028797018963968L) != 0L)
            return mccStopAtPos(1, 55);
         break;
      case 60:
         if ((active0 & 2147483648L) != 0L)
            return mccStopAtPos(1, 31);
         break;
      case 61:
         if ((active0 & 65536L) != 0L)
            return mccStopAtPos(1, 16);
         else if ((active0 & 131072L) != 0L)
            return mccStopAtPos(1, 17);
         else if ((active0 & 262144L) != 0L)
            return mccStopAtPos(1, 18);
         else if ((active0 & 524288L) != 0L)
            return mccStopAtPos(1, 19);
         break;
      case 62:
         if ((active0 & 64L) != 0L)
            return mccStopAtPos(1, 6);
         else if ((active0 & 128L) != 0L)
            return mccStopAtPos(1, 7);
         else if ((active0 & 256L) != 0L)
            return mccStopAtPos(1, 8);
         else if ((active0 & 4294967296L) != 0L)
            return mccStopAtPos(1, 32);
         else if ((active0 & 140737488355328L) != 0L)
            return mccStopAtPos(1, 47);
         else if ((active0 & 9007199254740992L) != 0L)
            return mccStopAtPos(1, 53);
         break;
      case 97:
         return mccMoveStringLiteralDfa2_0(active0, 39582418599936L);
      case 101:
         return mccMoveStringLiteralDfa2_0(active0, 18691697672192L);
      case 102:
         if ((active0 & 562949953421312L) != 0L)
            return mccStartNfaWithStates_0(1, 49, 7);
         break;
      case 105:
         return mccMoveStringLiteralDfa2_0(active0, 216172782113783808L);
      case 110:
         if ((active0 & 1125899906842624L) != 0L)
            return mccStartNfaWithStates_0(1, 50, 7);
         break;
      case 111:
         return mccMoveStringLiteralDfa2_0(active0, 281474976710656L);
      case 114:
         return mccMoveStringLiteralDfa2_0(active0, 72567767433216L);
      case 117:
         return mccMoveStringLiteralDfa2_0(active0, 8796093022208L);
      case 124:
         if ((active0 & 8192L) != 0L)
            return mccStopAtPos(1, 13);
         break;
      case 126:
         if ((active0 & 1048576L) != 0L)
            return mccStopAtPos(1, 20);
         break;
      default :
         break;
   }
   return mccStartNfa_0(0, active0);
}
private int mccMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(0, old0); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch((int)curChar) {
      case 101:
         return mccMoveStringLiteralDfa3_0(active0, 144115188075855872L);
      case 102:
         if ((active0 & 1099511627776L) != 0L)
            return mccStartNfaWithStates_0(2, 40, 7);
         break;
      case 108:
         return mccMoveStringLiteralDfa3_0(active0, 13194139533312L);
      case 112:
         if ((active0 & 35184372088832L) != 0L)
            return mccStartNfaWithStates_0(2, 45, 7);
         break;
      case 114:
         if ((active0 & 281474976710656L) != 0L)
            return mccStartNfaWithStates_0(2, 48, 7);
         return mccMoveStringLiteralDfa3_0(active0, 70368744177664L);
      case 115:
         return mccMoveStringLiteralDfa3_0(active0, 72057594037927936L);
      case 116:
         if ((active0 & 17592186044416L) != 0L)
            return mccStartNfaWithStates_0(2, 44, 7);
         break;
      case 117:
         return mccMoveStringLiteralDfa3_0(active0, 2199023255552L);
      default :
         break;
   }
   return mccStartNfa_0(1, active0);
}
private int mccMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(1, old0); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch((int)curChar) {
      case 97:
         return mccMoveStringLiteralDfa4_0(active0, 70368744177664L);
      case 101:
         if ((active0 & 2199023255552L) != 0L)
            return mccStartNfaWithStates_0(3, 41, 7);
         break;
      case 105:
         return mccMoveStringLiteralDfa4_0(active0, 72057594037927936L);
      case 108:
         if ((active0 & 8796093022208L) != 0L)
            return mccStartNfaWithStates_0(3, 43, 7);
         return mccMoveStringLiteralDfa4_0(active0, 144115188075855872L);
      case 115:
         return mccMoveStringLiteralDfa4_0(active0, 4398046511104L);
      default :
         break;
   }
   return mccStartNfa_0(2, active0);
}
private int mccMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(2, old0); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch((int)curChar) {
      case 100:
         if ((active0 & 144115188075855872L) != 0L)
            return mccStartNfaWithStates_0(4, 57, 7);
         break;
      case 101:
         if ((active0 & 4398046511104L) != 0L)
            return mccStartNfaWithStates_0(4, 42, 7);
         break;
      case 116:
         return mccMoveStringLiteralDfa5_0(active0, 72057594037927936L);
      case 121:
         if ((active0 & 70368744177664L) != 0L)
            return mccStartNfaWithStates_0(4, 46, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(3, active0);
}
private int mccMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(3, old0); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch((int)curChar) {
      case 101:
         return mccMoveStringLiteralDfa6_0(active0, 72057594037927936L);
      default :
         break;
   }
   return mccStartNfa_0(4, active0);
}
private int mccMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return mccStartNfa_0(4, old0); 
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch((int)curChar) {
      case 100:
         if ((active0 & 72057594037927936L) != 0L)
            return mccStartNfaWithStates_0(6, 56, 7);
         break;
      default :
         break;
   }
   return mccStartNfa_0(5, active0);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 59;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     mccCheckNAddStates(0, 16);
                  }
                  else if (curChar == 45)
                     mccCheckNAddStates(17, 26);
                  else if (curChar == 46)
                     mccCheckNAddTwoStates(36, 40);
                  else if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     mccCheckNAddTwoStates(1, 2);
                  if (curChar == 48)
                     mccAddStates(27, 30);
                  break;
               case 59:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     mccCheckNAddStates(31, 33);
                  }
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(34, 36);
                  break;
               case 45:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(33, 34);
                  else if (curChar == 46)
                     mccCheckNAdd(40);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(31, 32);
                  else if (curChar == 46)
                     mccCheckNAdd(36);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(29, 30);
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     mccCheckNAdd(28);
                  }
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(27, 22);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(23, 24);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(16, 17);
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(37, 40);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 3:
                  if (curChar == 39)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((-549755823105 & l) != 0L)
                     mccCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 70)
                     kind = 70;
                  break;
               case 7:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  mccstateSet[mccnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  mccCheckNAddStates(0, 16);
                  break;
               case 9:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(37, 40);
                  break;
               case 10:
                  if (curChar == 46)
                     mccCheckNAdd(11);
                  break;
               case 11:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(41, 43);
                  break;
               case 13:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(14);
                  break;
               case 14:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 46)
                     mccCheckNAdd(18);
                  break;
               case 18:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  mccCheckNAddStates(44, 46);
                  break;
               case 20:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(21);
                  break;
               case 21:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  mccCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(26);
                  break;
               case 26:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  mccCheckNAddTwoStates(26, 22);
                  break;
               case 27:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(27, 22);
                  break;
               case 28:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  mccCheckNAdd(28);
                  break;
               case 29:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(36, 40);
                  break;
               case 36:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(34, 36);
                  break;
               case 38:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(39);
                  break;
               case 39:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(39, 15);
                  break;
               case 40:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  mccCheckNAddStates(31, 33);
                  break;
               case 42:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(43);
                  break;
               case 43:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  mccCheckNAddTwoStates(43, 22);
                  break;
               case 44:
                  if (curChar == 45)
                     mccCheckNAddStates(17, 26);
                  break;
               case 46:
                  if (curChar == 46)
                     mccCheckNAdd(40);
                  break;
               case 47:
                  if (curChar == 48)
                     mccAddStates(27, 30);
                  break;
               case 49:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  mccstateSet[mccnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(47, 48);
                  break;
               case 54:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(49, 50);
                  break;
               case 57:
                  if ((287948901175001088 & l) != 0L)
                     mccAddStates(51, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 7:
                  if ((576460745995190270 & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  mccCheckNAdd(7);
                  break;
               case 1:
                  mccAddStates(53, 54);
                  break;
               case 4:
                  mccAddStates(55, 56);
                  break;
               case 12:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(57, 58);
                  break;
               case 15:
                  if ((274877907008 & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 19:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(59, 60);
                  break;
               case 22:
                  if ((68719476752 & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 24:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(61, 62);
                  break;
               case 30:
                  if ((144115188109410304 & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 32:
                  if ((2251799814209536 & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 34:
                  if ((17592186048512 & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 37:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(63, 64);
                  break;
               case 41:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(65, 66);
                  break;
               case 48:
                  if (curChar == 120)
                     mccCheckNAdd(49);
                  break;
               case 49:
                  if ((541165879422 & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  mccCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 120)
                     mccCheckNAdd(51);
                  break;
               case 51:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if ((144115188109410304 & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 53:
                  if (curChar == 120)
                     mccCheckNAdd(54);
                  break;
               case 54:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((2251799814209536 & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 56:
                  if (curChar == 120)
                     mccCheckNAdd(57);
                  break;
               case 57:
                  if ((541165879422 & l) != 0L)
                     mccCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((17592186048512 & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(53, 54);
                  break;
               case 4:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(55, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 59 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
static readonly int[] mccnextStates = {
   9, 10, 12, 15, 16, 17, 23, 24, 27, 22, 28, 29, 30, 31, 32, 33, 
   34, 9, 45, 16, 46, 23, 27, 28, 29, 31, 33, 48, 50, 53, 56, 40, 
   41, 22, 36, 37, 15, 9, 10, 12, 15, 11, 12, 15, 18, 19, 22, 51, 
   52, 54, 55, 57, 58, 1, 2, 4, 5, 13, 14, 20, 21, 25, 26, 38, 
   39, 42, 43, 
};
public static readonly string[] mccstrLiteralImages = {
"", null, null, null, null, "=", "=>", "|>", "&>", ",", "$", "&&", "&", "||", 
"|", "^", "==", "!=", "<=", ">=", "~~", "*", "+", "/", "!", "(", ")", "[", "]", 
"<", ">", "<<", ">>", "{", "}", ":", "::", "%", "?", "@", "def", "true", "false", 
"null", "set", "map", "array", "->", "for", "if", "in", ".", "<;", ";>", ";", ";;", 
"visited", "yield", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
};
static readonly long[] mcctoToken = {
   -1152921504606847007, 511, 
};
static readonly long[] mcctoSkip = {
   30, 0, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[59];
private readonly int[] mccstateSet = new int[118];
System.Text.StringBuilder image;
int mccimageLen;
int lengthOfMatch;
protected char curChar;
public SequenceParserTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SequenceParserTokenManager(SimpleCharStream stream, int lexState) :
   this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 59; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      return matchedToken;
   }
   image = null;
   mccimageLen = 0;

   try { input_stream.Backup(0);
      while (curChar <= ' ' && (4294977024L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   } catch (System.IO.IOException) { goto EOFLoop; }
   mccmatchedKind = Int32.MaxValue;
   mccmatchedPos = 0;
   curPos = mccMoveStringLiteralDfa0_0();
   if (mccmatchedPos == 0 && mccmatchedKind > 72)
   {
      mccmatchedKind = 72;
   }
   if (mccmatchedKind != Int32.MaxValue) {
      if (mccmatchedPos + 1 < curPos)
         input_stream.Backup(curPos - mccmatchedPos - 1);
      if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
         matchedToken = mccFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         goto EOFLoop;
      }
   }
   int error_line = input_stream.EndLine;
   int error_column = input_stream.EndColumn;
   string error_after = null;
   bool EOFSeen = false;
   try { input_stream.ReadChar(); input_stream.Backup(1); }
   catch (System.IO.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.Backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(mccmatchedKind) {
      case 69 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      case 70 :
        if (image == null)
            image = new System.Text.StringBuilder(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
         else
            image.Append(new String(input_stream.GetSuffix(mccimageLen + (lengthOfMatch = mccmatchedPos + 1))));
                  matchedToken.image = matchedToken.image.Substring(1, matchedToken.image.Length-2);
         break;
      default : 
         break;
   }
}
}
}
